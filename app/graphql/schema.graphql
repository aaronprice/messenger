"""
A channel
"""
type Channel {
  id: ID!
  messages(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): MessageConnection
  name: String!
}

"""
The connection type for Channel.
"""
type ChannelConnection {
  """
  A list of edges.
  """
  edges: [ChannelEdge]

  """
  A list of nodes.
  """
  nodes: [Channel]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
An edge in a connection.
"""
type ChannelEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Channel
}

"""
Autogenerated input type of CreateMessage
"""
input CreateMessageInput {
  """
  Body of the message
  """
  body: String

  """
  Name of the channel in which to post this message
  """
  channelName: String!

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  URL of a GIF
  """
  imageUrl: String
}

"""
Autogenerated return type of CreateMessage
"""
type CreateMessagePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [Error!]
  message: Message
}

"""
An error from a rails object
"""
type Error {
  field: String!
  messages: [String!]!
}

"""
The current authenticated user.
"""
type Me {
  authToken: String!
  id: ID!
  name: String!
}

"""
A message
"""
type Message {
  author: User!
  body: String
  channel: Channel!
  createdAt: Timestamp!
  id: ID!
  imageUrl: String
}

"""
The connection type for Message.
"""
type MessageConnection {
  """
  A list of edges.
  """
  edges: [MessageEdge]

  """
  A list of nodes.
  """
  nodes: [Message]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
}

"""
An edge in a connection.
"""
type MessageEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Message
}

type Mutation {
  chatMessageCreate(
    """
    Parameters for CreateMessage
    """
    input: CreateMessageInput!
  ): CreateMessagePayload
  userSignUp(
    """
    Parameters for SignUp
    """
    input: SignUpInput!
  ): SignUpPayload
}

"""
Information about pagination in a connection.
"""
type PageInfo {
  """
  When paginating forwards, the cursor to continue.
  """
  endCursor: String

  """
  When paginating forwards, are there more items?
  """
  hasNextPage: Boolean!

  """
  When paginating backwards, are there more items?
  """
  hasPreviousPage: Boolean!

  """
  When paginating backwards, the cursor to continue.
  """
  startCursor: String
}

type Query {
  """
  A list of channels and messages
  """
  channels(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): ChannelConnection
}

"""
Autogenerated input type of SignUp
"""
input SignUpInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Name of the user
  """
  name: String!
}

"""
Autogenerated return type of SignUp
"""
type SignUpPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [Error!]
  user: Me
}

scalar Timestamp

"""
Any user except the authenticated user
"""
type User {
  id: ID!
  name: String!
}